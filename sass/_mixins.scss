// add browser prefixes. Examples below:
// Example: @include prefix(box-shadow, 4px, webkit moz ms o spec);
// Example: @include prefix(transform, rotate(45deg), webkit moz ms o spec);
@mixin prefix($property, $value, $prefixes: webkit moz ms o spec) {
  @each $prefix in $prefixes {
    @if $prefix == webkit { -webkit-#{$property}: $value;} // Chrome10+,Safari5.1+
    @if $prefix == moz {-moz-#{$property}: $value;} // FF3.6+
    @if $prefix == ms { -ms-#{$property}: $value;} // IE10+
    @if $prefix == o { -o-#{$property}: $value;} // Opera 11.10+
    @if $prefix == spec { #{$property}: $value;} // W3C Spec
  }
}
// CSS calc
@mixin calc($property, $variable, $operation, $value, $fallback) {
   #{$property}: $fallback;
   #{$property}: -moz-calc(#{$variable} #{$operation} #{$value});
   #{$property}: -o-calc(#{$variable} #{$operation} #{$value});
   #{$property}: -webkit-calc(#{$variable} #{$operation} #{$value});
   #{$property}: calc(#{$variable} #{$operation} #{$value});
}

// Grid Section
//      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.   
// `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._

// Columns
@mixin columns ($count: 4, $gap: 20px, $fill: balance, $break:avoid, $sectionWidth: 100%){
  %columns {
    @include prefix(column-fill, $fill, webkit moz o spec);
    @include prefix(column-count, $count, webkit moz o spec);
    @include prefix(column-gap, $gap, webkit moz o spec);
  }
  %section {
    display: inline-block;
    width:$sectionWidth;
    @include prefix(column-break-inside, $break, webkit moz o spec);
  }
}

// Square
@mixin square-box ($square-w:10%, $square-p: 0 0 $square-w 0, $circle: false, $square-b: false, $border-size: '', $border-style: ''){
  @if $square-b == true {
    border:$border-size $border-style;
    @include calc($property:width, $variable:$square-w, $operation:'+', $value:$border-size*2, $fallback:$square-w);
  }
  @else {
    width: $square-w;
  }
  padding: $square-p;
  height:0;
  @if $circle == true {
    @include border-radius(50%);
  }
}

// Grid Wrap
@mixin grid-wrap ($t:$top, $r:$right, $b:$bottom, $l:$left, $gw-width: $start-width, $gw-margin: $auto){
  %gw {
    overflow: hidden;
    width: $gw-width;
    margin: $gw-margin;
    padding:$t $r $b $l;
  }
}

// Grid
@mixin grid ($mobile: false, $t:$top, $r:$right, $b:$bottom, $l:$left, $selector: $gd-selector, $gd-float: left, $gd-clear: none){
  @if $mobile == false {
    %gd {
      float:$gd-float;
      clear:$gd-clear;
      margin:$t $r $b $l;
    }
    @for $i from 1 through $gd-count {
      #{$selector}gd#{$i} {width: (100 / $gd-count * $i - $r - $l); @extend %gd;}
    }
  }
  @else {
    %gd {
      float:none;
      clear:both;
      margin:$t $r $b $l;
      width: 100% - $r - $l;
    }
    @for $i from 1 through $gd-count {
      #{$selector}gd#{$i} {@extend %gd;}
    }
  }
}

// Custom Grid $mobile, $t, $r, $b, $l, $selector, $gd-class, $gd-float, $gd-clear
@mixin grid-custom ($mobile: false, $gw: false, $gw-class: '', $gw-width: $start-width, $gw-margin: $auto, $t:$top, $r:$right, $b:$bottom, $l:$left, $selector: $gd-selector, $gd-float: left, $gd-clear: none){
  @if $gw == true {
    @include grid-wrap($t, $r, $b, $l, $gw-width, $gw-margin);
    @include grid($mobile);
  }
  @else {
    @include grid($mobile);
  }
}

@mixin alpha(){
  clear: left;
}
@mixin omega(){
  clear: right;
}



// UI Section
//      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.   
// `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._

// Background Size
@mixin background-size ($bs...){
  @include prefix(background-size, $bs, webkit moz o spec);
}

// Borders
@mixin border-radius ($borderRadius:10px){
  @include prefix(border-radius, $borderRadius);
}

@mixin border-image($args){
  @include prefix(border-image, $args, webkit moz o spec);
}

@mixin box-shadow ($boxShadow...){
  @include prefix(box-shadow, $boxShadow);
}

@mixin box-sizing($type: border-box){
  @include prefix(box-sizing, $type, webkit moz spec);
}

@mixin border-radius ($borderRadius){
  @include prefix(border-radius, $borderRadius, webkit moz spec);
}

//border radius directions
@mixin border-top-radius ($borderRadius){
  -webkit-border-top-left-radius: $borderRadius;
  -webkit-border-top-right-radius: $borderRadius;
  -moz-border-radius-topleft: $borderRadius;
  -moz-border-radius-topright: $borderRadius;
  border-radius: $borderRadius $borderRadius 0 0;
}
@mixin border-bottom-radius ($borderRadius){
  -webkit-border-bottom-left-radius: $borderRadius;
  -webkit-border-bottom-right-radius: $borderRadius;
  -moz-border-radius-bottomleft: $borderRadius;
  -moz-border-radius-bottomright: $borderRadius;
  border-radius: 0 0 $borderRadius $borderRadius;
}
@mixin border-left-radius ($borderRadius){
  -webkit-border-top-left-radius: $borderRadius;
  -webkit-border-bottom-left-radius: $borderRadius;
  -moz-border-radius-topleft: $borderRadius;
  -moz-border-radius-bottomleft: $borderRadius;
  border-radius: $borderRadius 0 0 $borderRadius;
}
@mixin border-right-radius ($borderRadius){
  -webkit-border-top-right-radius: $borderRadius;
  -webkit-border-bottom-right-radius: $borderRadius;
  -moz-border-radius-topright: $borderRadius;
  -moz-border-radius-bottomright: $borderRadius;
  border-radius: 0 $borderRadius $borderRadius 0;
}
@mixin border-image($args){
  @include prefix(border-image, $args, webkit moz o spec);
}

//for use of custom transitions
@mixin transition($transition) {
  @include prefix(transition, $transition, webkit moz ms o spec);
}
@mixin box-shadow-transition ($duration){
  @include prefix(transition, box-shadow #{$duration}s ease, webkit moz ms o spec);
}

//transformations
@mixin rotate($deg){
  @include prefix(transform, rotate(#{$deg}deg), webkit moz ms o spec);
}
@mixin rotate3d($x, $y, $z, $deg){
  @include prefix(transform, rotate3d($x, $y, $z, #{$deg}deg), webkit moz ms o spec);
}
@mixin scale($ratio) {
  @include prefix(transform, scale($ratio), webkit moz ms o spec);
}
@mixin translate($x, $y) {
  @include prefix(transform, translate($x, $y), webkit moz ms o spec);
}
@mixin skew($x, $y) {
  @include prefix(transform, skew($x, $y), webkit moz ms o spec);
}
@mixin translate3d($x, $y, $z) {
  @include prefix(transform, translate3d($x, $y, $z), webkit moz o spec);
}
@mixin matrix($a, $b,$c, $d, $x, $y) {
  @include prefix(transform, matrix($a, $b,$c, $d, $x, $y), webkit moz o spec);
}


//Add opacity to elements
@mixin opacity($opacity){
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity}*10)";
  filter: alpha(opacity=#{$opacity}*100);
  -moz-opacity: $opacity;
  -khtml-opacity: $opacity;
  opacity: $opacity;
}

// Add an alphatransparency value to any background or border color
@mixin translucent-background($color: #fff, $alpha: 0.5) {
  background: $color; //fallback
  background: hsla(hue($color), saturation($color), lightness($color), $alpha);
}
@mixin translucent-border($size: 1px, $style: solid, $color: #fff, $alpha: 0.5) {
  border: $size $style hsla(hue($color), saturation($color), lightness($color), $alpha);
  background-clip: padding-box;
}


//gradients
@mixin gradient($startColor, $endColor, $noGradient: mix($startColor, $endColor,50%), $type: 'vertical', $degOrImagePath: ''){
  @if ($type == 'vertical'){
    background: $noGradient;
    @each $i in -webkit-, -moz-, -ms-, -o-, '' {
      background: #{$i}linear-gradient(top, $startColor, $endColor) repeat-x mix($startColor, $endColor, 60%);
    }
  }

  @if ($type == 'horizontal'){
    background: $noGradient;
    @each $i in -webkit-, -moz-, -ms-, -o- {
      background: #{$i}linear-gradient(left, $startColor, $endColor) repeat-x mix($startColor, $endColor, 60%);
    }
    background: linear-gradient(to right, $startColor, $endColor) repeat-x $endColor;
  }

  @if ($type == 'radial'){
    background: $noGradient;
    @each $i in -webkit-, -moz-, -ms-, -o-, ''{
      background: #{$i}radial-gradient(circle, $startColor, $endColor) no-repeat mix($startColor, $endColor, 60%);
    }
  }

  @if ($type == 'directional'){
    background: $noGradient;
    @each $i in -webkit-, -moz-, -ms-, -o-, '' {
      background: #{$i}linear-gradient(#{$degOrImagePath}deg, $startColor, $endColor) repeat-x mix($startColor, $endColor, 60%);
    }
  }

  @if ($type == 'image'){
    background: url('#{$degOrImagePath}') no-repeat scroll $noGradient;
    @each $i in -webkit-, -moz-, -ms-, -o-, '' {
      background: url('#{$degOrImagePath}') no-repeat scroll, #{$i}linear-gradient(center top, $startColor, $endColor);
    }
  }
}


@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f, $noGradient: #444){
  background: $noGradient;
  @each $i in -webkit-, -moz-, -ms-, -o-, '' {
    background: #{$i}linear-gradient(top, $startColor, $midColor $colorStop, $endColor) no-repeat mix($midColor, $endColor, 80%);
  }
}

//button backgrounds
@mixin button($baseColor: #aaa, $style: 'simple'){
  background: $baseColor;
  
  @each $i in -webkit-, -moz-, -ms-, -o-, '' {
    @if ($style == 'simple') { background: #{$i}linear-gradient(top, lighten($baseColor, 10%), darken($baseColor, 10%)) repeat-x $baseColor; }
    @if ($style == 'complex') { background: #{$i}linear-gradient(top,  lighten($baseColor, 30%) 0%, lighten($baseColor, 10%) 5%, darken($baseColor, 10%) 95%, darken($baseColor, 20%) 100%); }
    @if ($style == 'shiny') { background: #{$i}linear-gradient(top,  lighten($baseColor, 5%) 0%, darken($baseColor, 5%) 50%, darken($baseColor, 15%) 51%, darken($baseColor, 4%) 100%); }
  }
  &:hover {
    background: darken($baseColor, 5%);
  }
}


// triangles ($direction can be: up, down, left, right, up-right, up-left, down-righ or down-left)
@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;

    @if $direction == up {
      border-bottom-color: $color;
    } @else if $direction == right {
      border-left-color: $color;
    } @else if $direction == down {
      border-top-color: $color;
    } @else if $direction == left {
      border-right-color: $color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $size solid $color;

    @if $direction == up-right {
      border-left: $size solid transparent;
    } @else if $direction == up-left {
      border-right: $size solid transparent;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $size solid $color;
    
    @if $direction == down-right {
      border-left: $size solid transparent;
    } @else if $direction == down-left {
      border-right: $size solid transparent;
    }
  }
}


//hide text for use with background images
@mixin hide-text{
    overflow:hidden;
    text-indent:-9999px;
    display:block;
}

//for custom @font-face
@mixin family($family: '', $url: '/fonts/', $weight: normal, $style: normal) {
  @font-face {
    font-family: $family;
    src: url('#{$url}.eot');
    src: url('#{$url}.eot?#iefix') format('embedded-opentype'),
         url('#{$url}.woff') format('woff'),
         url('#{$url}.ttf') format('truetype'),
         url('#{$url}.svg#svg') format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}

// Clearfix for clearing floats like a boss (from h5bp.com/q)
@mixin clearfix() {
  zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
    zoom: 1;
  }
  &:after {
    clear: both;
  }
}

// truncate text to use ellipsis. Must be applied to block or inline-block elements
@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// media queries for retina images
@mixin if-min-resolution($dppx) { //1.49
  @include if-resolution(min, $dppx) {
    @content;
  }
}
 
@mixin if-max-resolution($dppx) { //1.5
  @include if-resolution(max, $dppx) {
    @content;
  }
}
 
@mixin if-resolution($prefix, $dppx) {
  // 1px = 96dpi
  $dpi: $dppx * 96;
  @media
    (-webkit-#{$prefix}-device-pixel-ratio: #{$dppx}),
    (   #{$prefix}--moz-device-pixel-ratio: #{$dppx}),
    (     -o-#{$prefix}-device-pixel-ratio: #{$dppx*2}/2),
    (        #{$prefix}-device-pixel-ratio: #{$dppx}),
    (                #{$prefix}-resolution: #{$dpi}dpi),
    (                #{$prefix}-resolution: #{$dppx}dppx) { 
      @content;
  }
}

// browser specific-------------------------
@mixin ie7-inline-block {
  display: inline-block;
  vertical-align: baseline; // for all other browsers
  *vertical-align: auto; // set for consistency in IE7
  *display: inline; // IE7 inline-block hack 
  *zoom: 1; //enables hasLayout
}


// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;

  &:last-child {
    *margin-left: 0;
  }
}


// Animation

// This is a special mixin in that it is NOT called inside a selector but is instead
// called to target a selector. This mixin will add the animation for that selector.
// example: @include animate(.content, flash, 2, infinite); //this will add a selector of .content using the 'flash' animation for 2 secs long and loop the animation for infinite amount of times
// $target = class/id selector
// $animationName = name of animation type (i.e. bounce, flash, etc.)
// $duration = time of animation in seconds
// $iterationCount = how many times it will play the animation
@mixin animate($target, $animationName, $duration: 1, $iterationCount: 1){

  #{$target} {
    @include prefix(animation-name, #{$animationName}, webkit moz o spec);
    @include prefix(animation-duration, #{$duration}s, webkit moz o spec);
    @include prefix(animation-iteration-count, #{$iterationCount}, webkit moz o spec);
  }

  @each $i in '' {
    @keyframes #{$animationName} {

      // animations from Animate.css (http://daneden.me/animate/)
      @if($animationName == 'flash'){
        0%, 50%, 100% {opacity: 1;}
        25%, 75% {opacity: 0;}
      }
      @if($animationName == 'shake'){
        0%, 100% {#{$i}transform: translateX(0);}
        10%, 30%, 50%, 70%, 90% {#{$i}transform: translateX(-10px);}
        20%, 40%, 60%, 80% {#{$i}transform: translateX(10px);}
      }
      @if($animationName == 'bounce'){
        0%, 20%, 50%, 80%, 100% {#{$i}transform: translateY(0);}
        40% {#{$i}transform: translateY(-30px);}
        60% {#{$i}transform: translateY(-15px);}
      }
      @if($animationName == 'swing'){
        20%, 40%, 60%, 80%, 100% { #{$i}transform-origin: top center; }
        20% {#{$i}transform: rotate(15deg);}
        40% {#{$i}transform: rotate(-10deg);}
        60% {#{$i}transform: rotate(5deg);}
        80% {#{$i}transform: rotate(-5deg);}
        100% {#{$i}transform: rotate(0deg);}
      }
      @if($animationName == 'wobble'){
        0% { #{$i}transform: translateX(0%); }
        15% { #{$i}transform: translateX(-25%) rotate(-5deg); }
        30% { #{$i}transform: translateX(20%) rotate(3deg); }
        45% { #{$i}transform: translateX(-15%) rotate(-3deg); }
        60% { #{$i}transform: translateX(10%) rotate(2deg); }
        75% { #{$i}transform: translateX(-5%) rotate(-1deg); }
        100% { #{$i}transform: translateX(0%); }
      }
      @if($animationName == 'pulse'){
        0% { #{$i}transform: scale(1); }  
        50% { #{$i}transform: scale(1.1); }
          100% { #{$i}transform: scale(1); }
      }
      @if($animationName == 'flipInX'){
        0% { #{$i}transform: perspective(400px) rotateX(90deg); opacity: 0; }
          40% { #{$i}transform: perspective(400px) rotateX(-10deg); }
          70% { #{$i}transform: perspective(400px) rotateX(10deg); }
          100% { #{$i}transform: perspective(400px) rotateX(0deg); opacity: 1; }
      }
      @if($animationName == 'flipOutX'){
        0% { #{$i}transform: perspective(400px) rotateX(0deg); opacity: 1; }
        100% { #{$i}transform: perspective(400px) rotateX(90deg); opacity: 0; }
      }
      @if($animationName == 'flipInY'){
        0% { #{$i}transform: perspective(400px) rotateY(90deg); opacity: 0; } 
          40% { #{$i}transform: perspective(400px) rotateY(-10deg); }
          70% { #{$i}transform: perspective(400px) rotateY(10deg); }
          100% { #{$i}transform: perspective(400px) rotateY(0deg); opacity: 1; }
      }
      @if($animationName == 'flipOutY'){
        0% { #{$i}transform: perspective(400px) rotateY(0deg); opacity: 1; }
        100% { #{$i}transform: perspective(400px) rotateY(90deg); opacity: 0; }
      }
      @if($animationName == 'fadeIn'){
        0% {opacity: 0;}
        100% {opacity: 1;}
      }
      @if($animationName == 'fadeInUp'){
        0% { opacity: 0; #{$i}transform: translateY(20px); }
        100% { opacity: 1; #{$i}transform: translateY(0); }
      }
      @if($animationName == 'fadeInDown'){
        0% { opacity: 0; #{$i}transform: translateY(-20px); }
        100% { opacity: 1; #{$i}transform: translateY(0); }
      }
      @if($animationName == 'fadeInLeft'){
        0% { opacity: 0; #{$i}transform: translateX(-20px); }
        100% { opacity: 1; #{$i}transform: translateX(0); }
      }
      @if($animationName == 'fadeInRight'){
        0% { opacity: 0; #{$i}transform: translateX(20px); }
        100% { opacity: 1; #{$i}transform: translateX(0); }
      }
      @if($animationName == 'fadeInUpBig'){
        0% { opacity: 0; #{$i}transform: translateY(2000px); }
        100% { opacity: 1; #{$i}transform: translateY(0); }
      }
      @if($animationName == 'fadeInDownBig'){
        0% { opacity: 0; #{$i}transform: translateY(-2000px); }
        100% { opacity: 1; #{$i}transform: translateY(0); }
      }
      @if($animationName == 'fadeInLeftBig'){
        0% { opacity: 0; #{$i}transform: translateX(-2000px); }
        100% { opacity: 1; #{$i}transform: translateX(0); }
      }
      @if($animationName == 'fadeInRightBig'){
        0% { opacity: 0; #{$i}transform: translateX(2000px); }
        100% { opacity: 1; #{$i}transform: translateX(0); }
      }
      @if($animationName == 'fadeOut'){
        0% {opacity: 1;}
        100% {opacity: 0;}
      }
      @if($animationName == 'fadeOutUp'){
        0% { opacity: 1; #{$i}transform: translateY(0); }
        100% { opacity: 0; #{$i}transform: translateY(-20px); }
      }
      @if($animationName == 'fadeOutDown'){
        0% { opacity: 1; #{$i}transform: translateY(0); }
        100% { opacity: 0; #{$i}transform: translateY(20px); }
      }
      @if($animationName == 'fadeOutLeft'){
        0% { opacity: 1; #{$i}transform: translateX(0); }
        100% { opacity: 0; webkit-transform: translateX(-20px); }
      }
      @if($animationName == 'fadeOutRight'){
        0% { opacity: 1; #{$i}transform: translateX(0); }
        100% { opacity: 0; #{$i}transform: translateX(20px); }
      }
      @if($animationName == 'fadeOutUpBig'){
        0% { opacity: 1; #{$i}transform: translateY(0); }
        100% { opacity: 0; #{$i}transform: translateY(-2000px); }
      }
      @if($animationName == 'fadeOutDownBig'){
        0% { opacity: 1; webkit-transform: translateY(0); }
        100% { opacity: 0; #{$i}transform: translateY(2000px); }
      }
      @if($animationName == 'fadeOutLeftBig'){
        0% { opacity: 1; #{$i}transform: translateX(0); }
        100% { opacity: 0; #{$i}transform: translateX(-2000px); }
      }
      @if($animationName == 'fadeOutRightBig'){
        0% { opacity: 1; #{$i}transform: translateX(0); }
        100% { opacity: 0; #{$i}transform: translateX(2000px); }
      }
      @if($animationName == 'bounceIn'){
        0% { opacity: 0; #{$i}transform: scale(.3); }
        50% { opacity: 1; #{$i}transform: scale(1.05); }
        70% { #{$i}transform: scale(.9); }
        100% { #{$i}transform: scale(1); }
      }
      @if($animationName == 'bounceInUp'){
        0% { opacity: 0; #{$i}transform: translateY(2000px); }
        60% { opacity: 1; #{$i}transform: translateY(-30px); }
        80% { #{$i}transform: translateY(10px); }
        100% { #{$i}transform: translateY(0); }
      }
      @if($animationName == 'bounceInDown'){
        0% { opacity: 0; #{$i}transform: translateY(-2000px); }
        60% { opacity: 1; #{$i}transform: translateY(30px); }
        80% { #{$i}transform: translateY(-10px); }
        100% { #{$i}transform: translateY(0); }
      }
      @if($animationName == 'bounceInLeft'){
        0% { opacity: 0; #{$i}transform: translateX(-2000px); }
        60% { opacity: 1; #{$i}transform: translateX(30px); }
        80% { #{$i}transform: translateX(-10px); }
        100% { #{$i}transform: translateX(0); }
      }
      @if($animationName == 'bounceInRight'){
        0% { opacity: 0; #{$i}transform: translateX(2000px); }
        60% { opacity: 1; #{$i}transform: translateX(-30px); }
        80% { #{$i}transform: translateX(10px); }
        100% { #{$i}transform: translateX(0); }
      }
      @if($animationName == 'bounceOut'){
        0% { #{$i}transform: scale(1); }
        25% { #{$i}transform: scale(.95); }
        50% { opacity: 1; #{$i}transform: scale(1.1); }
        100% { opacity: 0; #{$i}transform: scale(.3); }
      }
      @if($animationName == 'bounceOutUp'){
        0% { #{$i}transform: translateY(0); }
        20% { opacity: 1; #{$i}transform: translateY(20px); }
        100% { opacity: 0; #{$i}transform: translateY(-2000px); }
      }
      @if($animationName == 'bounceOutDown'){
        0% { #{$i}transform: translateY(0); }
        20% { opacity: 1; #{$i}transform: translateY(-20px); }
        100% { opacity: 0; #{$i}transform: translateY(2000px); }
      }
      @if($animationName == 'bounceOutLeft'){
        0% { #{$i}transform: translateX(0); }
        20% { opacity: 1; #{$i}transform: translateX(20px); }
        100% { opacity: 0; #{$i}transform: translateX(-2000px); }
      }
      @if($animationName == 'bounceOutRight'){
        0% { #{$i}transform: translateX(0); }
        20% { opacity: 1; #{$i}transform: translateX(-20px); }
        100% { opacity: 0; #{$i}transform: translateX(2000px); }
      }
      @if($animationName == 'rotateIn'){
        0% { #{$i}transform-origin: center center; #{$i}transform: rotate(-200deg); opacity: 0; }
        100% { #{$i}transform-origin: center center; #{$i}transform: rotate(0); opacity: 1; }
      }
      @if($animationName == 'rotateInUpLeft'){
        0% { #{$i}transform-origin: left bottom; #{$i}transform: rotate(90deg); opacity: 0; }
        100% { #{$i}transform-origin: left bottom; #{$i}transform: rotate(0); opacity: 1; }
      }
      @if($animationName == 'rotateInDownLeft'){
        0% { #{$i}transform-origin: left bottom; #{$i}transform: rotate(-90deg); opacity: 0; }
        100% { #{$i}transform-origin: left bottom; #{$i}transform: rotate(0); opacity: 1; }
      }
      @if($animationName == 'rotateInUpRight'){
        0% { #{$i}transform-origin: right bottom; #{$i}transform: rotate(-90deg); opacity: 0; }
        100% { #{$i}transform-origin: right bottom; #{$i}transform: rotate(0); opacity: 1; }
      }
      @if($animationName == 'rotateInDownRight'){
        0% { #{$i}transform-origin: right bottom; #{$i}transform: rotate(90deg); opacity: 0; }
        100% { #{$i}transform-origin: right bottom; #{$i}transform: rotate(0); opacity: 1; }
      }
      @if($animationName == 'rotateOut'){
        0% { #{$i}transform-origin: center center; #{$i}transform: rotate(0); opacity: 1; }
        100% { #{$i}transform-origin: center center; #{$i}transform: rotate(200deg); opacity: 0; }
      }
      @if($animationName == 'rotateOutUpLeft'){
        0% { #{$i}transform-origin: left bottom; #{$i}transform: rotate(0); opacity: 1; }
        100% { #{$i}transform-origin: left bottom; #{$i}transform: rotate(-90deg); opacity: 0; }
      }
      @if($animationName == 'rotateOutDownLeft'){
        0% { #{$i}transform-origin: left bottom; #{$i}transform: rotate(0); opacity: 1; }
        100% { #{$i}transform-origin: left bottom; #{$i}transform: rotate(90deg); opacity: 0; }
      }
      @if($animationName == 'rotateOutUpRight'){
        0% { #{$i}transform-origin: right bottom; #{$i}transform: rotate(0); opacity: 1; }
        100% { #{$i}transform-origin: right bottom; #{$i}transform: rotate(90deg); opacity: 0; }
      }
      @if($animationName == 'rotateOutDownRight'){
        0% { #{$i}transform-origin: right bottom; #{$i}transform: rotate(0); opacity: 1; }
        100% { #{$i}transform-origin: right bottom; #{$i}transform: rotate(-90deg); opacity: 0; }
      }


    }
  }
  
}


